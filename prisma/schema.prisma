generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  cpf           String       @unique
  name          String
  password      String
  gender        GenderType?
  document      String?
  phoneNumber   String?
  birthDate     String?
  maritalStatus MaritalType?
  addressId     String?      @unique
  companyId     String?      @unique
  address       UserAddress? @relation(fields: [addressId], references: [id])
  company       UserCompany? @relation(fields: [companyId], references: [id])
  hardSkill     HardSkill[]  @relation()
  softSkill     SoftSkill[]  @relation()
  Mentor        Mentor?      @relation()
  Mentee        Mentee?      @relation()
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  deleted       DateTime?
}

model UserAddress {
  id           String    @id @default(uuid())
  postalCode   String
  city         String
  state        String
  street       String
  number       Int
  complement   String?
  neighborhood String
  country      String
  User         User?     @relation()
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deleted      DateTime?
}

model UserCompany {
  id             String    @id @default(uuid())
  name           String
  responsibility String?
  User           User?     @relation()
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deleted        DateTime?
}

model HardSkill {
  id          String    @id @default(uuid())
  name        String
  level       LevelType
  description String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deleted     DateTime?
}

model SoftSkill {
  id          String    @id @default(uuid())
  name        String
  level       LevelType
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deleted     DateTime?
  User        User[]    @relation()
}

model Mentor {
  id           String         @id @default(uuid())
  linkedin     String?
  occupation   String?
  experience   String?
  degree       DegreeType?
  expertise    String?
  valuePerHour Int?
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id])
  evaluation   Evaluation[]   @relation()
  availability Availability[] @relation()
  Connection   Connection?    @relation()
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  deleted      DateTime?
}

model Evaluation {
  id          String    @id @default(uuid())
  rating      Int
  description String?
  mentorId    String    @unique
  mentor      Mentor    @relation(fields: [mentorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deleted     DateTime?
}

model Availability {
  id          String      @id @default(uuid())
  openingTime String
  closingTime String
  weekday     WeekdayType
  mentorId    String      @unique
  mentor      Mentor      @relation(fields: [mentorId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  deleted     DateTime?
}

model Mentee {
  id           String      @id @default(uuid())
  linkedin     String?
  goal         String?
  interestArea String?
  degree       DegreeType?
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
  Connection   Connection? @relation()
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  deleted      DateTime?
}

model Connection {
  id        String    @id @default(uuid())
  meetUrl   String?
  mentorId  String    @unique
  mentor    Mentor    @relation(fields: [mentorId], references: [id])
  menteeId  String    @unique
  mentee    Mentee    @relation(fields: [menteeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deleted   DateTime?
}

enum GenderType {
  MALE
  FEMALE
  NONE
}

enum MaritalType {
  SINGLE
  MARRIED
  SEPARATED
  DIVORCED
  WIDOWER
}

enum LevelType {
  BEGGINER
  ELEMENTARY
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  EXPERT
}

enum DegreeType {
  ELEMENTARY_SCHOOL
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  GRADUATE
  POSTGRADUATE
  MASTER
  DOCTORATE
}

enum WeekdayType {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
