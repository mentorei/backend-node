generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  cpf           String         @unique
  name          String
  password      String
  gender        GenderType?
  document      String?
  avatar        String?
  phoneNumber   String?
  birthDate     String?
  maritalStatus MaritalType?
  addressId     String?        @unique
  companyId     String?        @unique
  mentorId      String?        @unique
  menteeId      String?        @unique
  address       UserAddress?   @relation(fields: [addressId], references: [id])
  company       UserCompany?   @relation(fields: [companyId], references: [id])
  skills        Skill[]        @relation()
  mentor        Mentor?        @relation(fields: [mentorId], references: [id])
  mentee        Mentee?        @relation(fields: [menteeId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  deleted       DateTime?
  notification  Notification[] @relation()
  verification  Verification[] @relation()
}

model UserAddress {
  id           String    @id @default(uuid())
  postalCode   String
  city         String
  state        String
  street       String
  number       Int
  complement   String?
  neighborhood String
  country      String
  user         User?     @relation()
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deleted      DateTime?
}

model UserCompany {
  id             String    @id @default(uuid())
  name           String
  responsibility String?
  user           User?     @relation()
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deleted        DateTime?
}

model Skill {
  id          String       @id @default(uuid())
  name        String
  level       LevelType
  type        SkillType
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deleted     DateTime?
  users       User[]       @relation()
  connections Connection[] @relation()
}

model Mentor {
  id             String               @id @default(uuid())
  linkedin       String?
  occupation     String?
  experience     String?
  degree         DegreeType?
  expertise      String?
  valuePerHour   Int?
  evaluations    MentorEvaluation[]   @relation()
  availabilities MentorAvailability[] @relation()
  connections    Connection[]         @relation()
  createdAt      DateTime             @default(now())
  updatedAt      DateTime?            @updatedAt
  deleted        DateTime?
  user           User?                @relation()
}

model MentorEvaluation {
  id          String    @id @default(uuid())
  rating      Int
  description String?
  mentorId    String
  mentor      Mentor    @relation(fields: [mentorId], references: [id])
  menteeId    String
  mentee      Mentee    @relation(fields: [menteeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deleted     DateTime?
}

model MentorAvailability {
  id          String       @id @default(uuid())
  openingTime String
  closingTime String
  weekday     WeekdayType
  inUse       Boolean      @default(false)
  mentorId    String
  mentor      Mentor       @relation(fields: [mentorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deleted     DateTime?
  connections Connection[] @relation()
}

model Mentee {
  id               String             @id @default(uuid())
  linkedin         String?
  goal             String?
  interestArea     String?
  degree           DegreeType?
  user             User?              @relation()
  connections      Connection[]       @relation()
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  deleted          DateTime?
  MentorEvaluation MentorEvaluation[]
}

model Connection {
  id                   String               @id @default(uuid())
  meetUrl              String?
  requestDescription   String?
  status               ConnectionStatusType
  skillId              String
  skill                Skill                @relation(fields: [skillId], references: [id])
  mentorAvailabilityId String
  mentorAvailability   MentorAvailability   @relation(fields: [mentorAvailabilityId], references: [id])
  mentorId             String
  mentor               Mentor               @relation(fields: [mentorId], references: [id])
  menteeId             String
  mentee               Mentee               @relation(fields: [menteeId], references: [id])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime?            @updatedAt
  deleted              DateTime?
}

model Notification {
  id          String           @id @default(uuid())
  read        Boolean          @default(false)
  type        NotificationType
  title       String
  description String
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  deleted     DateTime?
}

model Verification {
  id        String           @id @default(uuid())
  isValid   Boolean          @default(true)
  type      VerificationType
  code      String
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  deleted   DateTime?
}

enum GenderType {
  MALE
  FEMALE
  NONE
}

enum MaritalType {
  SINGLE
  MARRIED
  SEPARATED
  DIVORCED
  WIDOWER
}

enum LevelType {
  BEGGINER
  ELEMENTARY
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  EXPERT
}

enum DegreeType {
  ELEMENTARY_SCHOOL
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  GRADUATE
  POSTGRADUATE
  MASTER
  DOCTORATE
}

enum WeekdayType {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ConnectionStatusType {
  CREATED
  DECLINED
  IN_PROGRESS
  PAUSED
  FINISHED
}

enum NotificationType {
  CONNECTION
  USER
  SKILL
  MENTOR
}

enum SkillType {
  HARDSKILL
  SOFTSKILL
}

enum VerificationType {
  PASSWORD_RESET
  EMAIL_VERIFY
}
